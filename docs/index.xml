<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Eclipse fog05 - The End-to-End Compute, Storage and Networking Virtualisation solution.</title><link>https://fog05.io/docs/</link><description>Recent content in Docs on Eclipse fog05 - The End-to-End Compute, Storage and Networking Virtualisation solution.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://fog05.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Installation</title><link>https://fog05.io/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/getting-started/installation/</guid><description>Before getting started with Eclipse fog05 we need to install and start it
We have two possibilities for installing Eclipse fog05
From source From debian packages From source Agent Eclipse fog05 core component is written in OCaml, hence to build it we need a functional OCaml environment, luckily installing OCaml compiler and build system is not that complicated.
$ sudo apt install jq libev-dev libssl-dev m4 pkg-config rsync unzip bubblewrap -y $ sh &amp;lt;(curl -sL https://raw.</description></item><item><title>What is Eclipse fog05?</title><link>https://fog05.io/docs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/overview/</guid><description>Eclipse fog05 allows the end-to-end management of compute, storage, networking and I/O fabric in the Edge and Fog Environment. Instead of relying on a centralized architecture (like cloud-management-systems) it is based on a decentralized architecture.
Eclipse fog05 allows users to manage and deploy different types of applications, packaged as containers, VMs, binaries and so on. This possibility is achieved thanks to Eclipse fog05 plugin architecture.
More specifically, Eclipse fog05 is a Fog Infrastructure-as-a-Service solution composed by two major components:</description></item><item><title>FOrcE Installation</title><link>https://fog05.io/docs/getting-started/force-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/getting-started/force-installation/</guid><description>Before getting started with Eclipse fog05 orchestation we need to install and start it
We have three possibilities for installing Eclipse fog05
From source From debian packages Using a docker image From source We can now clone the Eclipse fog05 repository and build the orchestation engine
$ git clone https://github.com/eclipse-fog05/fog05 -b 0.2.x $ cd fog05/src/force $ make $ sudo install -m 0755 /usr/local/bin From debian packages For each release .</description></item><item><title>Hello World!</title><link>https://fog05.io/docs/getting-started/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/getting-started/hello-world/</guid><description>To kick off our tour of Eclipse fog05 and to demonstrate use and access of the Fog Infrastructure Manager, we will start with the obligatory &amp;ldquo;hello world&amp;rdquo; example. This example will deploy a docker container that just prints &amp;ldquo;Hello World!&amp;rdquo;
Let&amp;rsquo;s get started.
First, we need to install containerdm the containerd plugin for Eclipse fog05 and the fog05 client API.
$ wget https://github.com/eclipse-fog05/fog05/releases/download/v0.2.1/containerd.io_1.3.4-1_amd64.deb $ wget https://github.com/eclipse-fog05/fog05/releases/download/v0.2.1/fog05-plugin-fdu-containerd_0.2.1-1_amd64.deb $ sudo apt install .</description></item><item><title>Introducing fosctl</title><link>https://fog05.io/docs/getting-started/introducing-fosctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/getting-started/introducing-fosctl/</guid><description>Eclipse fog05 provides a command line tool to facilitate the interaction with its orchestration engine. If you want to use fosctl you need to install FOrcE please follow the instructions.
fosctl can be installed both for source of from its debian package
Once it is installed we can use it
From source Eclipse fog05 fosctl is written in rust, hence to build it from source you need a functional rust environment.</description></item><item><title>Eclipse fog05 with ETSI OSM Orchestrator</title><link>https://fog05.io/docs/getting-started/etsi-osm-interop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/getting-started/etsi-osm-interop/</guid><description>Eclipse fog05 is compatible with ETSI OSM, and can be used as a VIM by this one. Current interoperability is limited to simple NS using LXD containers as VNFs.
Let&amp;rsquo;s suppose we have a multi node fog05 deployment and we want to connect this deployment to OSM to instantiate VNFs.
First let&amp;rsquo;s add the VIM account to OSM
osm vim-create --name fos --auth_url &amp;lt;zenoh server ip&amp;gt;:7447 --account_type fos --tenant osm --user dummy --password dummy --config &amp;#39;{hypervisor: LXD}&amp;#39; Following paramater can be added</description></item><item><title>Architecture</title><link>https://fog05.io/docs/going-deeper/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/going-deeper/architecture/</guid><description>Eclipse fog05 is divided in two modules:
Fog Orchestration Engine (FOrcE) Fog Infrastructure Manager (FIM) Both modules provides different abstractions an APIs.
Fog Infrastrucutre Manager This module virtualises the hardware infrastructure, such as computational, communication, storage and I/O resources.
It provides key primitives for the management of the infrastructure and the application deployed in it. An example on how to interact with the FIM can be found in getting started guide.</description></item><item><title>Write a Runtime Plugin</title><link>https://fog05.io/docs/going-deeper/write_runtime_plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/going-deeper/write_runtime_plugin/</guid><description>Runtime Plugin The Runtime plugin implements the life-cycle management for FDU, is has to strictly follow the state machine defined for the FDU and provide handles for the state management and monitoring for the running FDUs.
This picture represent the state machine that an FDU has to follow.
States Each FDU can be in one of those nine states:
UNDEFINED DEFINED CONFIGURED RUNNING PAUSED SCALING MIGRATING TAKE_OFF LANDING UNDEFINED In this state the FDU is registered in the catalog but there are no instances in the system</description></item><item><title>Introduction</title><link>https://fog05.io/docs/internals/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/internals/intro/</guid><description>The internals section provides an in-depth guide of Eclipse fog05&amp;rsquo;s internals. It expects the reader already has a good understanding of how to use Eclipse fog05. Those unfamiliar with Eclipse fog05 should start with the getting started guide.
Location Transparent state access and distribution - How fog05 uses Zenoh</description></item><item><title>Location transparent state access and distribution</title><link>https://fog05.io/docs/internals/zenoh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fog05.io/docs/internals/zenoh/</guid><description>Eclipse fog05 uses Zenoh to provide location-transparent access to the system state and to distribute this state.
Distributed state Eclipse fog05 is designed from the beginning to not rely in any centralized construct, such as DB servers, controllers and so on.
We made this choice because the problem Eclipse fog05 is trying to address it the management on the Fog infrastructure which by definition is distributed, heterogenous, mobile and with intermittent connectivity.</description></item></channel></rss>